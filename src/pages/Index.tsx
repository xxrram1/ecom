import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Button } from "@/components/ui/button";
import { ArrowRight, Star, Truck, Shield, RefreshCw, Shirt, Package, Footprints, Layers, Sparkles, ShoppingBag, Grid3x3, User, Coffee, Zap, Gem } from 'lucide-react';
import Navigation from '@/components/Navigation';
import ProductCard from '@/components/ProductCard';
import { supabase } from '@/integrations/supabase/client';
import { useQuery } from '@tanstack/react-query';
import { Tables } from '@/integrations/supabase/types';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useCurrency } from '@/contexts/CurrencyContext';
import { formatCurrency } from '@/lib/currencyUtils';
import Footer from '@/components/Footer';

// ... (‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
const categoryIcons = {
  '‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡πÄ‡∏ä‡∏¥‡πâ‡∏ï': Shirt,
  '‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏¢‡∏∑‡∏î': User,
  '‡πÅ‡∏à‡πá‡∏Ñ‡πÄ‡∏Å‡πá‡∏ï': Package,
  '‡∏Æ‡∏π‡πâ‡∏î': ShoppingBag,
  '‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á': Coffee,
  '‡πÄ‡∏î‡∏£‡∏™': Layers,
  '‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤': Footprints,
  '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö': Sparkles,
  '‡∏Å‡∏£‡∏∞‡πÇ‡∏õ‡∏£‡∏á': Zap,
  '‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏Å‡∏±‡∏ô‡∏´‡∏ô‡∏≤‡∏ß': Gem,
  // English equivalents
  'Pants': Coffee,
  'T-Shirts': User,
  'Jackets': Package,
  'Accessories': Sparkles,
  'Dresses': Layers,
  'Shirts': Shirt,
  'Hoodies': ShoppingBag,
  'Skirts': Zap,
  'Sweaters': Gem,
  'Shoes': Footprints,
};

// Color mapping for categories - ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏ó‡∏ô sage/gray
const categoryColors = {
  '‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡πÄ‡∏ä‡∏¥‡πâ‡∏ï': 'from-sage-50 to-sage-100 border-sage-200 hover:from-sage-100 hover:to-sage-150',
  '‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏¢‡∏∑‡∏î': 'from-gray-50 to-gray-100 border-gray-200 hover:from-gray-100 hover:to-gray-150',
  '‡πÅ‡∏à‡πá‡∏Ñ‡πÄ‡∏Å‡πá‡∏ï': 'from-slate-50 to-slate-100 border-slate-200 hover:from-slate-100 hover:to-slate-150',
  '‡∏Æ‡∏π‡πâ‡∏î': 'from-sage-50 to-sage-100 border-sage-200 hover:from-sage-100 hover:to-sage-150',
  '‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á': 'from-gray-50 to-gray-100 border-gray-200 hover:from-gray-100 hover:to-gray-150',
  '‡πÄ‡∏î‡∏£‡∏™': 'from-slate-50 to-slate-100 border-slate-200 hover:from-slate-100 hover:to-slate-150',
  '‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤': 'from-sage-50 to-sage-100 border-sage-200 hover:from-sage-100 hover:to-sage-150',
  '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö': 'from-gray-50 to-gray-100 border-gray-200 hover:from-gray-100 hover:to-gray-150',
  '‡∏Å‡∏£‡∏∞‡πÇ‡∏õ‡∏£‡∏á': 'from-slate-50 to-slate-100 border-slate-200 hover:from-slate-100 hover:to-slate-150',
  '‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏Å‡∏±‡∏ô‡∏´‡∏ô‡∏≤‡∏ß': 'from-sage-50 to-sage-100 border-sage-200 hover:from-sage-100 hover:to-sage-150',
};


const Index = () => {
  const { selectedCurrency, setSelectedCurrency } = useCurrency();

  const { data: featuredProducts, isLoading: isLoadingFeatured, error: featuredError } = useQuery<Tables<'products'>[]>({
    queryKey: ['featuredProducts'],
    queryFn: async () => {
      console.log('üîÑ Fetching featured products...');
      const startTime = performance.now();
      
      const { data, error } = await supabase
        .from('products')
        // ‚úÖ **‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ: ‡πÄ‡∏û‡∏¥‡πà‡∏° sizes ‡πÅ‡∏•‡∏∞ colors ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô select statement**
        .select('id, name, price, original_price, image_url, rating, is_new, stock_quantity, sizes, colors')
        .not('image_url', 'is', null)
        .gte('stock_quantity', 1)
        .order('rating', { ascending: false, nullsFirst: false })
        .limit(8);

      const endTime = performance.now();
      console.log(`‚úÖ Featured products loaded in ${(endTime - startTime).toFixed(2)}ms`);

      if (error) {
        console.error('‚ùå Query error:', error);
        throw error;
      }
      
      console.log(`üì¶ Fetched ${data?.length || 0} products`);
      return data || [];
    },
    staleTime: 1000 * 60 * 30, 
    gcTime: 1000 * 60 * 60,
    refetchOnWindowFocus: false,
    refetchOnMount: false,
    retry: 1,
    retryDelay: 1000,
  });
  
  // ... (‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
  const { data: categories, isLoading: isLoadingCategories, error: categoriesError } = useQuery<any[]>({
    queryKey: ['categories'],
    queryFn: async () => {
      console.log('üîÑ Fetching categories...');
      const startTime = performance.now();
      
      const { data, error } = await supabase
        .from('products')
        .select('category')
        .not('category', 'is', null)
        .gte('stock_quantity', 0);
      
      if (error) throw error;
      
      // Process categories in client
      const categoryMap = new Map<string, number>();
      data.forEach(product => {
        if (product.category && product.category.trim()) {
          categoryMap.set(product.category, (categoryMap.get(product.category) || 0) + 1);
        }
      });
      
      const categoryArray = Array.from(categoryMap.entries()).map(([category, count]) => ({
        category,
        product_count: count
      }));
      
      const endTime = performance.now();
      console.log(`‚úÖ Categories processed in ${(endTime - startTime).toFixed(2)}ms`);
      
      return categoryArray;
    },
    staleTime: 1000 * 60 * 60, // 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    gcTime: 1000 * 60 * 120, // 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    refetchOnWindowFocus: false,
  });

  const getIcon = (category: string) => {
    const Icon = categoryIcons?.[category as keyof typeof categoryIcons];
    return Icon ? <Icon className="h-8 w-8 text-sage-600" /> : <Grid3x3 className="h-8 w-8 text-sage-600" />;
  };

  const getCategoryColors = (category: string) => {
    return categoryColors[category as keyof typeof categoryColors] || 'from-sage-50 to-sage-100 border-sage-200 hover:from-sage-100 hover:to-sage-150';
  };

  const countries = [
    { name: 'Thailand', currency: 'THB' },
    { name: 'United States', currency: 'USD' },
    { name: 'United Kingdom', currency: 'GBP' },
    { name: 'Germany', currency: 'EUR' },
    { name: 'Japan', currency: 'JPY' },
    { name: 'Australia', currency: 'AUD' },
  ];

  const paymentLogos = [
    'https://cdn.jsdelivr.net/npm/@primer/octicons@17.7.0/build/svg/credit-card-16.svg',
    'https://cdn.jsdelivr.net/npm/@primer/octicons@17.7.0/build/svg/credit-card-16.svg',
    'https://cdn.jsdelivr.net/npm/@primer/octicons@17.7.0/build/svg/credit-card-16.svg',
    'https://cdn.jsdelivr.net/npm/@primer/octicons@17.7.0/build/svg/credit-card-16.svg',
  ];

  const ProductSkeleton = () => (
    <div className="bg-white rounded-lg overflow-hidden shadow-sm animate-pulse">
      <div className="aspect-square bg-gray-300"></div>
      <div className="p-4 space-y-3">
        <div className="h-4 bg-gray-300 rounded w-3/4"></div>
        <div className="h-3 bg-gray-300 rounded w-1/2"></div>
        <div className="h-4 bg-gray-300 rounded w-1/3"></div>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-background">
      <Navigation />

      {/* Hero Section */}
      <section
        className="relative py-20 bg-cover bg-center"
        style={{ backgroundImage: `url('https://i.postimg.cc/m2hqFRCn/wmremove-transformed.png')` }}
      >
        <div className="absolute inset-0 bg-black opacity-50"></div>
        <div className="container mx-auto px-4 text-center relative z-10 text-white">
          <h1 className="text-5xl md:text-6xl font-light mb-6">
            Urban Threads
          </h1>
          <p className="text-xl mb-8 max-w-2xl mx-auto">
            ‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô‡∏°‡∏¥‡∏ô‡∏¥‡∏°‡∏≠‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏¢‡∏∏‡∏Ñ‡πÉ‡∏´‡∏°‡πà ‡∏î‡∏µ‡πÑ‡∏ã‡∏ô‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°
          </p>
          <Button className="bg-sage-600 hover:bg-sage-700 text-white px-8 py-3 text-lg" asChild>
            <Link to="/products" className="flex items-center">
              <span>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</span>
              <ArrowRight className="ml-2 h-5 w-5" />
            </Link>
          </Button>
        </div>
      </section>

      {/* Featured Products / ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ */}
      <section className="py-16">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-light text-center mb-12">‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</h2>
          
          {isLoadingFeatured ? (
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
              {Array.from({ length: 8 }).map((_, index) => (
                <ProductSkeleton key={index} />
              ))}
            </div>
          ) : featuredError ? (
            <div className="text-center py-12">
              <div className="text-red-500 mb-4">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</div>
              <Button 
                onClick={() => window.location.reload()} 
                variant="outline"
                className="text-red-600 border-red-600 hover:bg-red-50"
              >
                ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
              </Button>
            </div>
          ) : featuredProducts && featuredProducts.length > 0 ? (
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
              {featuredProducts.map((product) => (
                <ProductCard key={product.id} product={product} />
              ))}
            </div>
          ) : (
            <div className="text-center py-12">
              <div className="text-gray-500 mb-4">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ</div>
              <Button variant="outline" asChild>
                <Link to="/products">‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</Link>
              </Button>
            </div>
          )}
          
          {featuredProducts && featuredProducts.length > 0 && (
            <div className="text-center mt-12">
              <Button 
                  className="
                    px-8 py-3 bg-sage-600 text-white rounded-xl
                    hover:bg-sage-700 transition-all duration-300
                    font-medium text-lg shadow-lg hover:shadow-xl
                    transform hover:scale-105
                  "
                  asChild
                >
                  <Link to="/products" className="flex items-center gap-2 text-white font-semibold">
                    <span className="text-black">‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</span>
                    <ArrowRight className="h-5 w-5 text-white" />
                  </Link>
                </Button>
            </div>
          )}
        </div>
      </section>

      {/* Categories - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà */}
      <section className="py-20 bg-gradient-to-br from-gray-50 to-white">
        <div className="container mx-auto px-4">
          <div className="text-center mb-16">
            <h2 className="text-4xl font-light text-gray-900 mb-4">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h2>
            <p className="text-lg text-gray-600 max-w-2xl mx-auto">
              ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á ‡∏î‡∏µ‡πÑ‡∏ã‡∏ô‡πå‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡πÇ‡∏≠‡∏Å‡∏≤‡∏™
            </p>
          </div>

          {isLoadingCategories ? (
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
              {Array.from({ length: 8 }).map((_, index) => (
                <div key={index} className="bg-gray-200 rounded-xl p-6 animate-pulse">
                  <div className="w-16 h-16 bg-gray-300 rounded-full mx-auto mb-4"></div>
                  <div className="h-4 bg-gray-300 rounded w-3/4 mx-auto mb-2"></div>
                  <div className="h-3 bg-gray-300 rounded w-1/2 mx-auto"></div>
                </div>
              ))}
            </div>
          ) : categoriesError ? (
            <div className="text-center py-12">
              <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <span className="text-red-500 text-2xl">!</span>
              </div>
              <div className="text-red-500 mb-2 font-medium">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</div>
              <p className="text-sm text-gray-600 mb-6">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
              <Button 
                onClick={() => window.location.reload()} 
                variant="outline"
                className="text-red-600 border-red-600 hover:bg-red-50"
              >
                ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
              </Button>
            </div>
          ) : (
            <>
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                {categories?.map((category: any) => (
                  <Link 
                    to={`/products?category=${category.category}`} 
                    key={category.category} 
                    className="group block transform transition-all duration-300 hover:scale-105"
                  >
                    <Card className={`
                      bg-gradient-to-br ${getCategoryColors(category.category)}
                      border-2 transition-all duration-300 
                      group-hover:shadow-xl group-hover:shadow-gray-200/50
                      relative overflow-hidden rounded-xl
                    `}>
                      <CardContent className="p-6 text-center relative">
                        {/* Background decoration */}
                        <div className="absolute top-0 right-0 w-20 h-20 bg-white/20 rounded-full -mr-10 -mt-10"></div>
                        <div className="absolute bottom-0 left-0 w-16 h-16 bg-white/10 rounded-full -ml-8 -mb-8"></div>
                        
                        {/* Icon container */}
                        <div className="
                          w-16 h-16 mx-auto mb-4 
                          bg-white/90 backdrop-blur-sm 
                          rounded-full flex items-center justify-center
                          transition-all duration-300
                          group-hover:bg-white group-hover:scale-110
                          shadow-sm border border-white/50
                        ">
                          {getIcon(category.category)}
                        </div>
                        
                        {/* Category name */}
                        <h3 className="
                          font-semibold text-sage-800 mb-2 text-lg
                          transition-colors duration-300
                          group-hover:text-sage-900
                        ">
                          {category.category}
                        </h3>
                        
                        {/* Product count */}
                        <p className="
                          text-sage-600 text-sm font-medium
                          transition-colors duration-300
                          group-hover:text-sage-700
                        ">
                          {category.product_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                        </p>

                        {/* Hover indicator */}
                        <div className="
                          absolute top-3 right-3 w-2 h-2 
                          bg-sage-400 rounded-full opacity-0
                          transition-all duration-300
                          group-hover:opacity-100 group-hover:scale-150 group-hover:bg-sage-600
                        "></div>
                      </CardContent>
                    </Card>
                  </Link>
                ))}
              </div>

              {/* Call to action */}
              <div className="text-center mt-16">
                <Button 
                  className="
                    px-8 py-3 bg-sage-600 text-white rounded-xl
                    hover:bg-sage-700 transition-all duration-300
                    font-medium text-lg shadow-lg hover:shadow-xl
                    transform hover:scale-105
                  "
                  asChild
                >
                  <Link to="/products" className="flex items-center gap-2 text-white font-semibold">
                    <span className="text-black">‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</span>
                    <ArrowRight className="h-5 w-5 text-white" />
                  </Link>
                </Button>
              </div>
            </>
          )}
        </div>
      </section>

      {/* Features */}
      <section className="py-16">
        <div className="container mx-auto px-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            <div className="text-center">
              <div className="w-16 h-16 bg-sage-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <Truck className="h-8 w-8 text-sage-600" />
              </div>
              <h3 className="font-medium text-gray-900 mb-2">‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ü‡∏£‡∏µ</h3>
              <p className="text-gray-600">‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏£‡∏ö 1,500 ‡∏ö‡∏≤‡∏ó</p>
            </div>
            <div className="text-center">
              <div className="w-16 h-16 bg-sage-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <Shield className="h-8 w-8 text-sage-600" />
              </div>
              <h3 className="font-medium text-gray-900 mb-2">‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û</h3>
              <p className="text-gray-600">‡∏ú‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ ‡∏ó‡∏ô‡∏ó‡∏≤‡∏ô</p>
            </div>
            <div className="text-center">
              <div className="w-16 h-16 bg-sage-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <RefreshCw className="h-8 w-8 text-sage-600" />
              </div>
              <h3 className="font-medium text-gray-900 mb-2">‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏á‡πà‡∏≤‡∏¢</h3>
              <p className="text-gray-600">‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 7 ‡∏ß‡∏±‡∏ô ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏à</p>
            </div>
          </div>
        </div>
      </section>

      {/* Customer Reviews */}
      <section className="py-16 bg-gray-50">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-light text-center mb-12">‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {[
              {
                name: '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡πÉ‡∏à',
                review: '‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ‡∏°‡∏≤‡∏Å ‡πÉ‡∏™‡πà‡∏™‡∏ö‡∏≤‡∏¢ ‡∏î‡∏µ‡πÑ‡∏ã‡∏ô‡πå‡∏™‡∏ß‡∏¢ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞',
                rating: 5
              },
              {
                name: '‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏•‡∏µ',
                review: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏° ‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÄ‡∏£‡πá‡∏ß ‡∏ö‡∏£‡∏£‡∏à‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏î‡∏π‡∏î‡∏µ',
                rating: 5
              },
              {
                name: '‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏¥‡∏ó‡∏¢‡πå',
                review: '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤ ‡∏ú‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏´‡∏î ‡∏™‡∏µ‡πÑ‡∏°‡πà‡∏ï‡∏Å ‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à‡∏°‡∏≤‡∏Å',
                rating: 5
              }
            ].map((testimonial, index) => (
              <div key={index} className="bg-white rounded-lg p-6">
                <div className="flex items-center mb-4">
                  {[...Array(testimonial.rating)].map((_, i) => (
                    <Star key={i} className="h-4 w-4 text-yellow-400 fill-current" />
                  ))}
                </div>
                <p className="text-gray-600 mb-4">"{testimonial.review}"</p>
                <p className="font-medium text-gray-900">- {testimonial.name}</p>
              </div>
            ))}
          </div>
        </div>
      </section>

      <Footer/>
    </div>
  );
};

export default Index;